Chapter1	NumPyの基本
----------------------------------------
1.1 NumPyの基本とインストール方法
----------------------------------------
1.1.2　Pythonのインストール
----------------------------------------
［ターミナル］
$ /usr/bin/ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"

［ターミナル］
$ brew install python3

［ターミナル］
$ python

簡単なチュートリアル
----------------------------------------
>>>1 + 2

>>>1 - 2

>>>3 * 4

>>>5 / 2

>>>x = 5

>>>x + 2

>>>3 * x

>>>print(x)

>>>type((1, 2, 3)) # typeという関数でデータ型の確認ができる

>>>type([1, 2, 3])

>>>(1, 2, 3, 4, 5)

>>>a = (1, 2, 3, 4, 5) # aにタプルを格納する

>>>a[0]

>>>b = [1, 2, 3, 4, 5] # リストを作成する

>>>b[1]

>>>b[4]

>>>dic = {'a': 1, 'b': 2, 'c': 3} # 辞書を作る

>>>dic['a'] # コロン(:)の左側にある値(キー)で値を呼び出す

>>>for i in range(3):
...    print(i)

>>>def function(x):
...    return x + 5
...
>>>function(3)

IPythonのインストール
----------------------------------------
［ターミナル］
$ pip install ipython

［ターミナル］
$ ipython

1.1.3　NumPyのインストール方法
----------------------------------------
［ターミナル］
$ pip install numpy

［ターミナル］
$ pip install numpy==1.14.3

［ターミナル］
$ sudo easy_install pip

pipを使わない方法
----------------------------------------
［端末］
$ sudo apt-get install python-numpy python-scipy python-matplotlib ipython ipython-notebook python-pandas python-sympy python-nose

［ターミナル］
$ brew tap homebrew/science && brew install python numpy scipy matplotlib


1.1.4 NumPyチュートリアル
----------------------------------------
［ターミナル］
$ ipython

In [1]:import numpy as np

In [2]:a = np.array([1, 2, 3])

In [3]:a * 3

In [4]:a + 2

In [5]:[1, 2, 3] * 3

In [6]:b = np.array([2, 2, 0])

In [7]:a + b

In [8]:a / b

In [9]:a * b

In [10]:np.dot(a, b)

In [11]:np.arange(10)

In [12]:np.arange(0, 10, 2) # (始点、終点、間隔)

In [13]:np.linspace(0, 10, 15) # 0～10の区間を15等分する

In [14]:c = np.array([[1, 2, 3], [4, 5, 6]]) # 2次元配列を作る

In [15]:c

In [16]:c.shape

In [17]:d = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]],
...:[[13,14,15],[16,17,18],[19,20,21],[22,23,24]]])

------------------
In [17]:利用しやすいテキスト
------------------
d = np.array([[[1, 2, 3], [4, 5, 6], [7, 8, 9], [10, 11, 12]],
[[13,14,15],[16,17,18],[19,20,21],[22,23,24]]])
------------------

In [18]:d

In [19]:d.shape

In [20]:np.sum(c)

In [21]:np.sum(c, axis=1)

In [22]:c.reshape(3, 2)

In [23]:c.reshape(6, 1)

In [24]:c.T

In [25]:np.transpose(c)

In [26]:np.random.randn()

In [27]:np.random.rand()

In [28]:np.random.randn(2, 3)

In [29]:a

In [30]:a[0]

In [31]:a[2]

In [32]:a

In [33]:a[1] = 3

In [34]:a

In [35]:a[1] = 2

In [36]:a

In [37]:c

In [38]:c[0, 0]

In [39]:c[0, 2]

In [40]:c[1, 2]

In [41]:d = np.array([0, 5, 2, 7, 1, 9])

In [42]:d[1:5]

In [43]:d[1:3]

In [44]:d[0:5:2]

In [45]:d[::-1]

In [46]:a

In [47]:c

In [48]:a + c

In [49]:a * c

In [50]:import time # 時間を扱うモジュールをインポートする

In [51]:def calculate_time():
...:    a = np.random.randn(100000)
...:    b = list(a) # リストに変換
...:    start_time = time.time() # 開始時刻を設定する
...:    for _ in range(1000):
...:        sum_1 = np.sum(a)
...:    print("Using NumPy\t %f sec" % (time.time()-start_time))
...:    start_time = time.time() # 開始時刻を再度設定する
...:    for _ in range(1000):
...:       sum_2 = sum(b)
...:    print("Not using NumPy\t %f sec" % (time.time()-start_time))

------------------
In [51]:利用しやすいテキスト
------------------
def calculate_time():
    a = np.random.randn(100000)
    b = list(a) # リストに変換
    start_time = time.time() # 開始時刻を設定する
    for _ in range(1000):
       sum_1 = np.sum(a)
    print("Using NumPy\t %f sec" % (time.time()-start_time))
    start_time = time.time() # 開始時刻を再度設定する
    for _ in range(1000):
        sum_2 = sum(b)
    print("Not using NumPy\t %f sec" % (time.time()-start_time))
------------------

In [52]:calculate_time()

In [53]:a = np.random.randn(10000000)

In [54]:%timeit np.sum(a)

In [55]:%timeit sum(a)

1.2 多次元データ構造ndarrayの基礎
----------------------------------------
1.2.2 属性（attributes）
----------------------------------------
In [1]:import numpy as np # NumPyモジュールをインポートする

In [2]:a = np.array([1, 2, 3]) # ndarrayインスタンスを生成する

In [3]:type(a) # クラスを確認する

In [4]:b = np.array([[1, 2, 3], [4, 5, 6]]) # これで2-dimensional array(2次元配列

In [5]:a

In [6]:b # 各々表示させると次のようになる

In [7]:b.T # 転置させる

In [8]:a.T # a.ndim < 2なので変化はなし

In [9]:a.data # メモリの位置を表示する

In [10]:a.dtype # データ型を表示する

In [11]:a.flags

In [12]:b.flags # いろいろな情報が表示される

In [13]:a.flat[1] # aを１次元配列にした時の1番目の要素を表示する

In [14]:b.flat[4] # bを１次元配列にした時の4番目の要素を表示する

In [15]:c = np.array([1.-2.6j,2.1+3.j, 4.-3.2j]) # 複素数を要素とするndarrayインスタンスを生成する

In [16]:c.real # 実部を表示する

In [17]:c.imag # 虚部を表示する

In [18]:a.size # 要素の数

In [19]:b.size

In [20]]:a.itemsize # バイトオーダーでの要素1つ1つの長さ、環境によっては4になる

In [21]:b.itemsize # 環境によっては4になる

In [22]:c.size, c.itemsize

In [23]:a.nbytes # バイトオーダーでの配列の長さ。環境によっては12になる

In [24]:b.nbytes # 環境によっては24になる

In [25]:c.nbytes

In [26]:a.size * a.itemsize == a.nbytes # この等式が成り立つ

In [27]:a.ndim # 次元数を表示する

In [28]:b.ndim

In [29]:a.shape # 形状を表示する

In [30]:b.shape # 形状を表示する

In [31]:d = np.array([[[2,3,2],[2,2,2]],[[4,3,2],[5,7,1]]]) # 3次元配列を生成する

In [32]:d.shape, d.ndim # 形状と次元数を表示する

In [33]:a.strides # 各次元方向(axis=ndim,axis=ndim-1,…,axis=1,axis=0)における1つの要素に移動するためのバイトオーダー。環境によっては(4,)となる

In [34]:b.strides # .ndim = 2 環境によっては(12, 4)となる

In [35]:c.strides # .ndim = 3

In [36]:d.strides # .ndim = 3 環境によっては(24, 12, 4)となる

In [37]:a.ctypes.data # ctypesモジュールを使った操作

In [38]:a.base # aのベースとなる配列はどこか

In [39]:e = a[:2]

In [40]:e.base

In [41]:e.base is a

In [42]:a.base is e.base

1.2.4ストライド
----------------------------------------
In [43]:a = np.random.randn(100,100)

In [44]:b = np.array(a, order='C') # row-major

In [45]:c = np.array(a, order='F') # column-major

In [46]:b.strides, c.strides # ストライドを見ると、距離が逆転している

In [47]:np.allclose(b, c)

In [48]:x = np.ones((100000,)) ＃ すべての要素を1で初期化する

In [49]:y = np.ones((100000*100,))[::100] # 100個飛ばしに読み込む

In [50]:x.strides # 1つ隣の要素にたどり着くために8バイト分ジャンプするだけで良い

In [51]:y.strides # 1つ隣の要素にたどり着くために800バイト分ジャンプする必要がある

In [52]:x.shape, y.shape

In [53]:%timeit x.sum() # こちらのほうが断然早い

In [54]:%timeit y.sum()

In [55]:y_copy = np.copy(np.ones((100000*100,))[::100])

In [56]:y_copy.strides

In [57]:%timeit y_copy.sum()

1.2.5 ブロードキャスト
----------------------------------------
In [58]:a = np.array([1, 2, 3])

In [59]:b = np.array([[1, 1, 1],[2, 4, 1]]) # 2次元配列

In [60]:b + a # ブロードキャストの適用

1.3 ブロードキャスト
----------------------------------------
1.3.1 ブロードキャストとは
----------------------------------------
In [1]:import numpy as np

In [2]:np.array([[1, 2, 3]]) + [1]

1.3.2 ブロードキャストでは何が起こっているのか
----------------------------------------
In [3]:a = np.array([[1, 2]])

In [4]:a.shape

In [5]:b = np.array([3, 4])

In [6]:b.shape

In [7]:a + b

In [8]:a = np.array([1, 2])

In [9]:b = np.array([[3, 4],[2, 3]])

In [10]:a

In [11]:b

In [12]:a.shape

In [13]:b.shape

In [14]:a + b

In [15]:a = np.array([[2], [1]])

In [16]:b = np.array([5])

In [17]:c = np.array([[[1, 2, 3], [4, 5, 6]],[[7, 8, 9], [10, 11, 12]]])

In [18]:a

In [19]:b

In [20]:c

In [21]:a.shape

In [22]:b.shape

In [23]:c.shape

In [24]:a + b + c

1.4 スライシング
----------------------------------------
In [1]:a = [1, 2, 3, 4, 5]

In [2]:a[1:-1]

1.4.2 スライシングの使い方
----------------------------------------
In [3]:import numpy as np

In [4]:a = np.arange(15)

In [5]:a

In [6]:a[5:11:2]

In [7]:a = np.arange(10) # 10個の連番を要素とする配列で見てみる

In [8]:a

In [9]:a[1:5] # 1～4

In [10]:a[2:8:2] # 2～7を1個おきで

In [11]:a[::-1] # 逆順に

In [12]:a[:3] # 0～2

In [13]:a[4:] # 4～9

In [14]:a[:3],a[3:] # 3を境に2つに分割

In [15]:a[::2] # 1個おきで

In [16]:a[:] # 全範囲

1.4.3 多次元への拡張
----------------------------------------
In [17]:b = np.arange(20).reshape(4,5) # 4×5の2次元配列

In [18]:b

In [19]:b[1:3, 2:4] # 1～2行目、2～3列目を抜き出す

In [20]:b[:2, 1:] # 0～1行目、1～4列目を抜き出す

In [21]:b[::2, :] # 行方向に1つ飛ばしで要素を抜き出す

In [22]:b[:, ::2] # 列方向に1つ飛ばしで要素を抜き出す

In [23]:b[:, ::-1] # 逆順

In [24]:b[::-1, ::-1] # 全部ひっくり返す

In [25]:c = np.zeros((3, 4, 5)) # 3×4×5の3次元配列

In [26]:c

In [27]:c[1:, 1:4, :] = 1

In [28]:c

In [29]:c = np.zeros((3, 4, 5)) # リセット

In [30]:c[:, 1:2, 3:] = 1

In [31]:c

In [32]:c = np.zeros((3, 4, 5)) # リセット

In [33]:c[:, :, ::2] = 1 # 2個ごと

In [34]:c

In [35]:c = np.zeros((3, 4, 5)) # リセット

In [36]:c[::2, ::2, ::2] = 1

In [37]:c

1.5 軸（axis）と次元数（ndim）について
----------------------------------------
1.5.1 ndarrayの次元数（ndim）とは何か
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([[1, 2, 3], [4, 5, 6]])

In [3]:a.shape

In [4]:a.ndim

1.5.2 axisについて
----------------------------------------
In [5]:a = np.arange(6).reshape((3, 2))

In [6]:a

In [7]:a.shape

In [8]:b = np.array([a, a])

In [9]:b.shape

In [10]:b

1.5.3 関数の引数としてのaxis
----------------------------------------
In [11]:b.sum(axis=0)

In [12]:b.sum(axis=0).shape

In [13]:b.sum(axis=1)

In [14]:b.sum(axis=1).shape

In [15]:b.sum(axis=2)

In [16]:b.sum(axis=2).shape

1.6 ndarrayの属性（attribute）shape
----------------------------------------
1.6.1 ndarray.shape
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([5, 3, 8, 9])

In [3]:a

In [4]:a.shape

In [5]:a = np.array([5, 3, 8, 9])

In [6]:b = a.reshape((2, 2))

In [7]:b

In [8]:b.shape

In [9]:a

In [10]:a.shape

In [11]:a.shape = (4, 1)

In [12]:a

In [13]:c = np.arange(12).reshape((3, 4))

In [14]:c

In [15]:c.shape=(1, 12)

In [16]:c

In [17]:c.shape = (13,) # 要素数を誤るとエラーが返る

In [18]:a = np.array([1, 2, 3, 4, 5]) # ただの1次元配列

In [19]:a.shape

In [20]:b = np.array([[1], [2], [3], [4], [5]]) # 縦ベクトルのようにすると(R,1)の形になる

In [21]:b.shape

1.7 要素のデータ型（dtype）の種類と指定方法
----------------------------------------
1.7.2 データ型
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([0, 1, 2]) # まずは何も指定しない状態で配列を生成する

In [3]:a.dtype # データ型を確かめる

In [4]:b = np.array([0, 1, 2], dtype='int32') # ビット数を下げてみる

In [5]:b.dtype

In [6]:b

In [7]:c = np.array([0, 1, 2], dtype='float') # floatやintのデフォルトのビット数は64

In [8]:c # cの要素の表記のされ方が'int'の時と異なっていて、小数点が付いている

In [9]:d = np.array([3e50, 4e35], dtype='int64') # 桁数を非常に大きくすると、'int'では表示しきれなくなってエラーが返ってくる

In [10]:d = np.array([3e50, 4e35], dtype='float64') # floatにすれば問題なく配列を生成できる

In [11]:e = np.array([3.5, 4.2, -4.3], dtype='int') # 小数の形で表した配列も、データ型を'int'に設定すると整数部分だけが残る

In [12]:e

In [13]:f = np.array([0, 3, 0, -1], dtype = 'bool') # bool値は0ならばFalse、0以外ならばTrueとなる

In [14]:f

In [15]:g = np.array([0., 1., 2.], dtype='int64')

In [16]:g

In [17]:g.dtype = 'int32' # データ型を'int32'に変換する

In [18]:g

In [19]:g.dtype = 'float64' # データ型を'float64'に変換する

In [20]:g

In [21]:g.dtype = 'float32' # ビット数を32に変える

In [22]:g

In [23]:g.dtype = 'int64' # データ型を元に戻すと値も元に戻る

In [24]:g

In [25]:h = np.random.randint(10, size=100, dtype='int8') # 0～9までの整数を100個生成。データ型は'int8'

In [26]:i = np.random.randint(10, size=100, dtype='int64') # こちらはビット数を64に設定する

In [27]:h.nbytes # バイト数を確認する

In [28]:i.nbytes # hの8倍になっている

1.8 コピー（copy）とビュー（view）の違い
----------------------------------------
1.8.1 そもそもcopyとviewとは何なのか
----------------------------------------
In [1]:import numpy as np

In [2]:a = np.array([1, 2, 3])

In [3]:d = a.view() # viewを作成する

In [4]:d[0] = 100 # viewの値を1つ変更する

In [5]:d

In [6]:a # 元の配列であるaにも変更が反映される

In [7]:c = a.copy()

In [8]:c[1] = 25

In [9]:c

In [10]:a

1.8.2 操作による違い
----------------------------------------
In [11]:a = np.array([1, 2, 3])

In [12]:b = a # bにaを代入

In [13]:id(a) == id(b) # 参照元が同じかどうかを確かめる

In [14]:a = np.array([1, 2, 3])

In [15]:c = a[:] # 表記を変えてみる

In [16]:id(a) == id(c) # 違うオブジェクトを参照しているのがわかる

In [17]:c[1] = 22 # cの一部を変更

In [18]:a # 変更がaにも反映されている

In [19]:d = a[:1]

In [20]:id(d) == id(a)

In [21]:d[0] = 11

In [22]:a

In [23]:d

In [24]:e = a.copy() # aのcopyを代入

In [25]:e.base is a

In [26]:e[2] = 234

In [27]:e

In [28]:a

In [29]:print(a.base)

In [30]:f = a.copy()

In [31]:f.base is a

In [32]:a = np.array([1, 2, 3])

In [33]:c = a # viewとなるcを作る

In [34]:a = a + 1 # 1を加算する

In [35]:c # cに変更が反映されない

In [36]:a

In [37]:a = np.array([1, 2, 3])

In [38]:c = a

In [39]:a += 1

In [40]:c

In [41]:a

In [42]:a = np.array([1, 2, 3])

In [43]:c = a

In [44]:np.add(a, 1, out=a)

In [45]:a

In [46]:c

In [47]:def test():
...:    import numpy as np
...:    import time
...:    X = np.ones(100000000, dtype='int8')
...:    Y = np.ones(100000000, dtype='int8')
...:    a = time.time()
...:    for _ in range(100):
...:        X = X*4 + Y*3
...:        X = np.ones(100000000, dtype='int8')
...:    b = time.time()
...:    print('X = X*4 + Y*3: {} sec'.format((b-a)/100))
...:    a = time.time()
...:    for _ in range(100):
...:        X *= 4
...:        X += Y*3
...:        X = np.ones(100000000, dtype='int8')
...:    b = time.time()
...:    print('X *= 4; X += Y*3: {} sec'.format((b-a)/100))
...:    a = time.time()
...:    for _ in range(100):
...:        np.multiply(X, 4, out=X)
...:        np.multiply(Y, 3, out=Y)
...:        np.add(X, Y, out=X)
...:        X = np.ones(100000000, dtype='int8')
...:    b = time.time()
...:    print("using functions: {} sec".format((b-a)/100))

------------------
In [47]:利用しやすいテキスト
------------------
def test():
    import numpy as np
    import time
    X = np.ones(100000000, dtype='int8')
    Y = np.ones(100000000, dtype='int8')
    a = time.time()
    for _ in range(100):
        X = X*4 + Y*3
        X = np.ones(100000000, dtype='int8')
    b = time.time()
    print('X = X*4 + Y*3: {} sec'.format((b-a)/100))
    a = time.time()
    for _ in range(100):
        X *= 4
        X += Y*3
        X = np.ones(100000000, dtype='int8')
    b = time.time()
    print('X *= 4; X += Y*3: {} sec'.format((b-a)/100))
    a = time.time()
    for _ in range(100):
        np.multiply(X, 4, out=X)
        np.multiply(Y, 3, out=Y)
        np.add(X, Y, out=X)
        X = np.ones(100000000, dtype='int8')
    b = time.time()
    print("using functions: {} sec".format((b-a)/100))
------------------

In [48]:test()

In [49]:a = np.random.randn(2, 3, 9)

In [50]:b = a.ravel()

In [51]:c = a.flatten()

In [52]:a

In [53]:a[0,0,0] = 129

In [54]:a[0,0,0], b[0], c[0]

In [55]:a = np.random.randint(10, size=100)

In [56]:a

In [57]:n = a%3==0 # 3の倍数のところがTrueになる

In [58]:n

In [59]:a[n] # 3の倍数の要素を抽出する

In [60]:k = a[n]

In [61]:np.may_share_memory(a, k) # メモリを共有しているかどうかを確かめる関数。1.8.5項「copyかviewか確かめる方法」で解説する

In [62]:f = a[np.arange(0, 10, 2)]

In [63]:np.may_share_memory(a, f)

In [64]:a = np.array([1, 2, 3])

In [65]:b = a

In [66]:c = b

In [67]:d = a.copy()

In [68]:np.may_share_memory(a, b) # Trueならbはaのviewだということになる

In [69]:np.may_share_memory(a, c) # こちらもTrueとなる

In [70]:np.may_share_memory(a, d) # dはaのcopyなのでFalse

In [71]:np.shares_memory(a, b) # より厳密な測定にはshare_memoryを使う

In [72]:np.shares_memory(a, d)

